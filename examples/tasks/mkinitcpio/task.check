~regexp: ^^ \s* "MODULES=(" (.*) ")" \s* $$
generator: <<CODE
!raku
sub check-and-modify() {
   if !matched() {
      # fail check if no MODULES= section found 
      say "assert 0 MODULES= section found";
      return;
   } else {
      say "note: matched line: ", matched().raku;
      my $path = config()<path>;
      say "note: MODULES found: ", capture()[0].raku;
      my @mods = capture()[0].split(/\s+/);
      my $indx = 0;
      my %mods; for @mods -> $i { %mods{$i} = $indx; $indx++ };
      my $sanity-check = True;
      for qw<filesystems kms>.sort -> $f {
         if $f (elem) @mods {
              say "assert: 1 $f exists in MODULES";
         } else {
              say "assert: 0 $f exists in MODULES";
              $sanity-check = False;
         }
      }
      if "udev" (elem) @mods || "systemd" (elem) @mods {
         say "assert: 1 udev or systemd exists in MODULES";
      } else {
         say "assert: 0 udev or systemd exists in MODULES";
      }
      return unless $sanity-check;

      say "note: start appying patches";
      say "note: config: ", config().raku;
      if config()<zfs_filesystem> or "zfs" (elem) @mods {
         if config()<zfs_filesystem> and %mods<zfs>:exists {
            say "note: insert zfs before filesystems";
            @mods.splice(%mods<zfs>,1); # remove zfs mod
            @mods[%mods<filesystems>] = "zfs filesystems";
         }
         if config()<zfs_filesystem> and %mods<zfs>:!exists {
            say "note: add zfs mode";
            @mods.push("zfs"); # add zfs node
         }
         if config()<zfs_filesystem> and %mods<fsck>:exists {
            say "note: remove fsck";
            @mods.splice(%mods<fsck>,1); # remove fsck mod
         }
         if config()<encrypt_root_partition > and config()<zfs_filesystem> and %mods<keyboard>:!exists {
            say "note: add keyboard after kms";
            @mods(%mods<kms>) = "kms keyboard"; # add keyboard after kms
         }
      }
      # probably other mods manipulations
      # and then update configuration
      say "note: patch $path";
      replace(
         $path,
         captures-full()[0]<index>,
         "MODULES=({@mods.join(" ")})",
      );
   }
}
check-and-modify();
CODE
